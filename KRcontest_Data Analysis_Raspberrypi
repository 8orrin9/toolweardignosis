import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
import plotly.express as px
from plotly.offline import init_notebook_mode
from scipy.fft import ifft
from sklearn.preprocessing import StandardScaler
import joblib

data = {}

for b in range(1, 4):
    filename = f'./test/1-{b}.csv'
    var_name = f'data_1_{b}'
    data[var_name] = pd.read_csv(filename)
    data[var_name] = data[var_name].head(6000)

    time_series_data_piezo = data[var_name]['Piezo Value'].values
    time_series_data_mic = data[var_name]['Mic Value'].values

    fft_result_piezo = np.fft.fft(time_series_data_piezo)
    fft_result_mic = np.fft.fft(time_series_data_mic)

    magnitude_piezo = np.abs(fft_result_piezo)
    magnitude_mic = np.abs(fft_result_mic)

    frequency_piezo = np.fft.fftfreq(len(time_series_data_piezo), d=1)
    frequency_mic = np.fft.fftfreq(len(time_series_data_mic), d=1)

    positive_frequency_piezo = frequency_piezo[:len(frequency_piezo) // 2]
    positive_frequency_mic = frequency_mic[:len(frequency_mic) // 2]

    positive_magnitude_piezo = magnitude_piezo[:len(magnitude_piezo) // 2]
    positive_magnitude_mic = magnitude_mic[:len(magnitude_mic) // 2]

    sampling_rate = 6000

    frequency_hz_piezo = positive_frequency_piezo * sampling_rate
    frequency_hz_mic = positive_frequency_mic * sampling_rate

    positive_magnitude_df_piezo = pd.DataFrame({'Positive_Magnitude_piezo': positive_magnitude_piezo})
    positive_magnitude_df_mic = pd.DataFrame({'Positive_Magnitude_mic': positive_magnitude_mic})

    positive_magnitude_df_piezo.loc[0, 'Positive_Magnitude_piezo'] = 0
    positive_magnitude_df_mic.loc[0, 'Positive_Magnitude_mic'] = 0
        
    mean_piezo = np.mean(positive_magnitude_df_piezo["Positive_Magnitude_piezo"])
    mean_mic = np.mean(positive_magnitude_df_mic["Positive_Magnitude_mic"])

    std_dev_piezo = np.std(positive_magnitude_df_piezo["Positive_Magnitude_piezo"])
    std_dev_mic = np.std(positive_magnitude_df_mic["Positive_Magnitude_mic"])

    threshold = 5

    lower_bound_piezo = mean_piezo - (threshold * std_dev_piezo)
    lower_bound_mic = mean_mic - (threshold * std_dev_mic)

    upper_bound_piezo = mean_piezo + (threshold * std_dev_piezo)
    upper_bound_mic = mean_mic + (threshold * std_dev_mic)

    magnitude_values_piezo = positive_magnitude_df_piezo["Positive_Magnitude_piezo"]
    magnitude_values_mic = positive_magnitude_df_mic["Positive_Magnitude_mic"]

    outliers_piezo = [i for i, x in enumerate(magnitude_values_piezo) if x < lower_bound_piezo or x > upper_bound_piezo]
    outliers_mic = [i for i, x in enumerate(magnitude_values_mic) if x < lower_bound_mic or x > upper_bound_mic]

    for i in outliers_piezo:
        magnitude_values_piezo[i] = mean_piezo

    for i in outliers_mic:
        magnitude_values_mic[i] = mean_mic

    positive_magnitude_df_piezo["Positive_Magnitude_piezo"] = magnitude_values_piezo
    positive_magnitude_df_mic["Positive_Magnitude_mic"] = magnitude_values_mic

    complex_data_piezo = positive_magnitude_df_piezo["Positive_Magnitude_piezo"].values
    complex_data_mic = positive_magnitude_df_mic["Positive_Magnitude_mic"].values
        
    time_domain_data_piezo = ifft(complex_data_piezo)
    time_domain_data_mic = ifft(complex_data_mic)

    time_domain_df_piezo = pd.DataFrame({"Time_Domain_piezo_1": time_domain_data_piezo})
    time_domain_df_mic = pd.DataFrame({"Time_Domain_mic_1": time_domain_data_mic})

    time_domain_df = pd.concat([time_domain_df_piezo['Time_Domain_piezo_1'], time_domain_df_mic['Time_Domain_mic_1']], axis=1)
    data_1 = time_domain_df

t_data_test_piezo = pd.DataFrame()
for var_name, df in data.items():
    t_data_test_piezo[var_name] = df.iloc[:, 0]
    
new_column_names_test_piezo = ['test_piezo_' + column for column in t_data_test_piezo.columns]
t_data_test_piezo.columns = new_column_names_test_piezo

t_data_test_mic = pd.DataFrame()
for var_name, df in data.items():
    t_data_test_mic[var_name] = df.iloc[:, 1]
    
new_column_names_test_mic = ['test_mic_' + column for column in t_data_test_mic.columns]
t_data_test_mic.columns = new_column_names_test_mic



real_part_t_p = t_data_test_piezo.apply(lambda x: x.apply(lambda z: z.real))
imaginary_part_t_p = t_data_test_piezo.apply(lambda x: x.apply(lambda z: z.imag))

scaler_1 = StandardScaler()
scaled_real_t_p = scaler_1.fit_transform(real_part_t_p)

new_columns_t_p = []

for i in range(1, 97):
    if i%3==1:
        part = 'tp_' + str(i//3+1)
    new_columns_t_p.append(part + '_' + str((i-1)%3+1))

scaled_complex_df_t_p = pd.DataFrame(scaled_real_t_p, columns=new_columns_t_p)

real_part_t_m = t_data_test_mic.apply(lambda x: x.apply(lambda z: z.real))
imaginary_part_t_m = t_data_test_mic.apply(lambda x: x.apply(lambda z: z.imag))

scaler_2 = StandardScaler()
sequence_piezo = scaler_2.fit_transform(real_part_t_m)

new_columns_t_m = []

for i in range(1, 97):
    if i%3==1:
        part = 'tm_' + str(i//3+1)
    new_columns_t_m.append(part + '_' + str((i-1)%3+1))

sequence_mic = pd.DataFrame(scaled_real_t_m, columns=new_columns_t_m)



stat_piezo = pd.DataFrame({'min': sequence_piezo.min(numeric_only=True),'max': sequence_piezo.max(numeric_only=True),
                           'quantile': sequence_piezo.quantile(numeric_only=True),'median': sequence_piezo.median(numeric_only=True),
                           'skew': sequence_piezo.skew(numeric_only=True),'kurtosis': sequence_piezo.kurtosis(numeric_only=True)})
stat_mic = pd.DataFrame({'min': sequence_mic.min(numeric_only=True),'max': sequence_mic.max(numeric_only=True),
                         'quantile': sequence_mic.quantile(numeric_only=True),'median': sequence_mic.median(numeric_only=True),
                         'skew': sequence_mic.skew(numeric_only=True),'kurtosis': sequence_mic.kurtosis(numeric_only=True)})



from sklearn.decomposition import PCA

model_piezo_pca = PCA(n_components=6)
model_piezo_pca.fit(stat_piezo)
stat_piezo = model_piezo_pca.transform(stat_piezo)
test_X_test_piezo = pd.DataFrame(stat_piezo)

model_mic_pca = PCA(n_components=6)
model_mic_pca.fit(stat_mic)
stat_mic = model_mic_pca.transform(stat_mic)
test_X_test_mic = pd.DataFrame(stat_mic)



model_xgb_piezo = joblib.load('model_xgb_piezo.pkl')
model_xgb_mic = joblib.load('model_xgb_mic.pkl')



test_pred_xgb_piezo = model_xgb_piezo.predict(test_X_test_piezo)
test_pred_xgb_mic = model_xgb_mic.predict(test_X_test_mic)

result_test_xgb_piezo = pd.DataFrame(test_pred_xgb_piezo)
result_test_xgb_piezo.rename(columns={0:'PIEZO_XGB'}, inplace=True)
result_test_xgb_mic= pd.DataFrame(test_pred_xgb_mic)
result_test_xgb_mic.rename(columns={0:'MIC_XGB'}, inplace=True)

probs_xgb_piezo = model_xgb_piezo.predict_proba(test_X_test_piezo)
probs_xgb_piezo_df = pd.DataFrame(probs_xgb_piezo)
probs_xgb_mic = model_xgb_mic.predict_proba(test_X_test_mic)
probs_xgb_mic_df = pd.DataFrame(probs_xgb_mic)

probs_xgb_piezo_df_2 = probs_xgb_piezo_df.copy()
probs_xgb_piezo_df_2.drop([0], axis=1, inplace=True)
probs_xgb_piezo_df_2.rename(columns={1: 'PIEZO_XGB_PREDICT'}, inplace=True)

probs_xgb_mic_df_2 = probs_xgb_mic_df.copy()
probs_xgb_mic_df_2.drop([0], axis=1, inplace=True)
probs_xgb_mic_df_2.rename(columns={1: 'MIC_XGB_PREDICT'}, inplace=True)

probs_xgb_tot = pd.concat([probs_xgb_piezo_df_2,probs_xgb_mic_df_2], join='inner', axis=1)



result_xgb = pd.concat([result_test_xgb_piezo,result_test_xgb_mic,piezo_xgb_prob,mic_xgb_prob], join='outer', axis=1)

result_xgb['RESULT'] = 0

for index, row in result_xgb.iterrows():
    if row['PIEZO_XGB_PREDICT'] == row['MIC_XGB_PREDICT']:
        if row['PIEZO_XGB_PREDICT'] > 0.5:
            result_xgb.at[index,'RESULT'] = 'WEAR'
        else:
            result_xgb.at[index, 'RESULT'] = 'NORMAL'
    else:
        piezo_diff = abs(row['PIEZO_XGB_PREDICT'] - 0.5)
        mic_diff = abs(row['MIC_XGB_PREDICT'] - 0.5)

        if piezo_diff > mic_diff:
            if row['PIEZO_XGB_PREDICT'] > 0.5:
                result_xgb.at[index, 'RESULT'] = 'WEAR'
            else:
                result_xgb.at[index, 'RESULT'] = 'NORMAL'
        else:
            if row['MIC_XGB_PREDICT'] > 0.5:
                result_xgb.at[index, 'RESULT'] = 'WEAR'
            else:
                result_xgb.at[index, 'RESULT'] = 'NORMAL'


final = result_xgb['RESULT'].iloc[0:3].tolist()
normal_count = final.count('NORMAL')
wear_count = final.count('WEAR')

if normal_count == 3:
    print('NORMAL')
elif wear_count == 3:
    print("WEAR")
elif normal_count == 2 and wear_count == 1:
    print("NORMAL_need check")
elif normal_count == 1 and wear_count == 2:
    print("WEAR_need check")
